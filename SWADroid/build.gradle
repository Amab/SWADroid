apply plugin: 'com.android.application'

ext {
    git = org.ajoberstar.grgit.Grgit.open()
    gitVersionCode = git.tag.list().size()
    gitVersionName = "${git.describe()}"

    travisBuild = System.getenv("TRAVIS") == "true"
}

android {
    compileSdkVersion 24
    buildToolsVersion "24.0.3"

    dexOptions {
        maxProcessCount=2
        javaMaxHeapSize "2g"
    }

    lintOptions {
        abortOnError false
    }

    defaultConfig {
        applicationId "es.ugr.swad.swadroid"
        versionCode gitVersionCode
        versionName gitVersionName

        minSdkVersion 9
        targetSdkVersion 24

        android.applicationVariants.all { variant ->
            def appName
            //Check if an applicationName property is supplied; if not use the name of the parent project.
            if (project.hasProperty("applicationName")) {
                appName = applicationName
            } else {
                appName = parent.name
            }

            variant.outputs.each { output ->
                def newApkName
                //If there's no ZipAlign task it means that our artifact will be unaligned and we need to mark it as such.
                if (output.zipAlign) {
                    newApkName = "${appName}-${output.baseName}-${variant.versionName}.apk"
                } else {
                    newApkName = "${appName}-${output.baseName}-${variant.versionName}-unaligned.apk"
                }
                output.outputFile = new File(output.outputFile.parent, newApkName)
            }
        }

        testApplicationId "es.ugr.swad.swadroid.test"
        testInstrumentationRunner "android.test.InstrumentationTestRunner"
    }

    buildTypes {
        debug {
            versionNameSuffix '-DEBUG'
        }

        buildTypes.each {
            it.buildConfigField "String", "SWAD_APP_KEY", getBuildConfigField("SWAD_APP_KEY")
            it.buildConfigField "String", "ANALYTICS_API_KEY", getBuildConfigField("ANALYTICS_API_KEY")
        }
    }
}

//return a BuildConfigField from a properties file.
def getBuildConfigField(String property){
    def value

    if(travisBuild) {
        value = "\"" + System.getenv(property) + "\""
    } else {
        Properties properties = new Properties()
        properties.load(new FileInputStream("keystore.properties"))
        value = "\"" + properties.getProperty(property) + "\""
    }

    return value
}

dependencies {
    compile 'com.android.support:support-v4:24.2.1'
    compile 'com.android.support:appcompat-v7:24.2.1'
    compile 'com.google.android.gms:play-services-analytics:9.6.1'
    compile 'com.google.code.ksoap2-android:ksoap2-android:3.6.2'
    compile 'commons-io:commons-io:2.5'
    compile 'com.nostra13.universalimageloader:universal-image-loader:1.9.5'
    compile 'com.journeyapps:zxing-android-embedded:3.2.0@aar'
    compile 'com.google.zxing:core:3.2.1'
    compile 'com.google.code.gson:gson:2.7'
}