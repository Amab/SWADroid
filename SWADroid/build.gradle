plugins {
    id 'com.gladed.androidgitversion' version '0.4.14'
}
apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'

//return a BuildConfigField from a properties file.
def static getBuildConfigField(String property){
    def propFile = new File("keystore.properties")
    def value

    if(propFile.exists()) {
        Properties properties = new Properties()
        properties.load(new FileInputStream(propFile))
        value = "\"" + properties.getProperty(property) + "\""
    } else {
        value = "\"" + System.getenv(property) + "\""
    }

    return value
}

def build_param = "${build}"

if (build_param != "prod") {
    //exclude development build
    android.variantFilter { variant ->
        if (variant.buildType.name == 'prod') {
            variant.setIgnore(true)
        }
    }
} else {
    //exclude all except development build
    android.variantFilter { variant ->
        if (variant.buildType.name != 'prod') {
            variant.setIgnore(true)
        }
    }
}

android {
    compileSdkVersion 33
    buildToolsVersion "33.0.0"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    defaultConfig {
        applicationId "es.ugr.swad.swadroid"
        versionName androidGitVersion.name()
        versionCode androidGitVersion.code()

        minSdkVersion 24
        targetSdkVersion 33

        testApplicationId "es.ugr.swad.swadroid.androidTest"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField "String", "SWAD_APP_KEY", getBuildConfigField("SWAD_APP_KEY")

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    buildTypes {
        prod {
            minifyEnabled true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        // Adds exported schema location as androidTest app assets.
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
    }
    lint {
        abortOnError false
    }
    namespace 'es.ugr.swad.swadroid'

}

dependencies {
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.4.2'
    implementation 'com.google.code.ksoap2-android:ksoap2-android:3.6.4'
    implementation 'commons-io:commons-io:2.11.0'
    implementation 'com.nostra13.universalimageloader:universal-image-loader:1.9.5'
    implementation 'com.journeyapps:zxing-android-embedded:4.3.0@aar'
    implementation 'com.google.zxing:core:3.5.0'
    implementation 'com.google.code.gson:gson:2.9.0'
    implementation 'com.google.android.material:material:1.6.1'
    implementation platform('com.google.firebase:firebase-bom:30.2.0')
    implementation 'com.google.firebase:firebase-analytics'

    //Lombok
    def lombok_version = "1.18.24"
    compileOnly "org.projectlombok:lombok:$lombok_version"
    annotationProcessor "org.projectlombok:lombok:$lombok_version"
    testCompileOnly "org.projectlombok:lombok:$lombok_version"
    testAnnotationProcessor "org.projectlombok:lombok:$lombok_version"

    //Database dependencies
    def room_version = "2.4.2"
    implementation 'net.zetetic:android-database-sqlcipher:4.5.1@aar'
    implementation "androidx.sqlite:sqlite:2.2.0"
    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"
    // optional - Test helpers
    testImplementation "androidx.room:room-testing:$room_version"

    //Tests
    def test_version = "1.4.0"
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation "androidx.test:core:$test_version"
    androidTestImplementation "androidx.test:rules:$test_version"
    androidTestImplementation "androidx.test:runner:$test_version"
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
}
